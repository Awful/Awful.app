#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse, glob, os, shutil, subprocess, tempfile

def main():
    parser = argparse.ArgumentParser(description="Download dSYMs from App Store Connect and upload them to Crashlytics")
    parser.add_argument("--api-key", required=True,
                        help="your Crashlytics API key (from Settings > Organizations)")
    parser.add_argument("--bundle-id", required=True,
                        help="your app's bundle identifier")
    parser.add_argument("--team-name", required=True,
                        help="your Apple Developer team name")
    parser.add_argument("--username", required=True,
                        help="your Apple ID username")
    parser.add_argument("versions", metavar="VERSION (BUILD_NUMBER)", nargs="+",
                        help="a version and build number to fetch symbols for")
    args = parser.parse_args()

    output_dir = tempfile.mkdtemp(suffix="upload-missing-dSYMs")

    for version in args.versions:
        short_version, build_number = parse_version(version)
        download_dsyms(args.username, args.team_name,
                       args.bundle_id, short_version, build_number,
                       output_dir)

    zip_files = glob.glob(os.path.join(output_dir, "*.zip")) 
    upload_dsyms(args.api_key, zip_files)

    shutil.rmtree(output_dir, True)


def parse_version(version):
    short_version, parens = version.split()
    return short_version, parens.strip("()")


def download_dsyms(username, team_name, bundle_id, short_version, build_number, output_dir):
    subprocess.check_call(["fastlane", "run", "download_dsyms",
                           "username:" + username,
                           "app_identifier:" + bundle_id,
                           "team_name:" + team_name,
                           "version:" + short_version,
                           "build_number:" + build_number,
                           "output_directory:" + output_dir])


SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
PODS_ROOT = os.path.realpath(os.path.join(SCRIPT_DIR, "..", "Pods"))


def upload_dsyms(api_key, zip_files):
    subprocess.check_call([os.path.join(PODS_ROOT, "Fabric", "upload-symbols"),
                           "-a", api_key,
                           "-p", "ios"] +
                           list(zip_files))


if __name__ == "__main__":
    main()

